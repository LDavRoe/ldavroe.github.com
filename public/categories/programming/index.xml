<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Lucas Roesler</title>
    <link>http://lucasroesler.com/categories/programming/index.xml</link>
    <description>Recent content in Programming on Lucas Roesler</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://lucasroesler.com/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SSL Expiry Quick and Simple</title>
      <link>http://lucasroesler.com/2017/06/ssl-expiry-quick-and-simple/</link>
      <pubDate>Sun, 11 Jun 2017 11:00:00 -0600</pubDate>
      
      <guid>http://lucasroesler.com/2017/06/ssl-expiry-quick-and-simple/</guid>
      <description>&lt;p&gt;Ever have that feeling you are forgetting something right as you leave work? You are probably thinking about your keys or your lunch box but I am talking about your SSL certificate.  They don&amp;rsquo;t last forever, we know this when we setup SSL but that doesn&amp;rsquo;t stop it from sneaking up on us.  It has happened to the big guys like &lt;a href=&#34;https://thenextweb.com/apps/2015/04/30/oops-instagram-forgot-to-renew-its-ssl-certificate/#.tnw_9kCFpT58&#34;&gt;Instagram&lt;/a&gt; and &lt;a href=&#34;http://www.pcworld.com/article/2906216/expired-google-certificate-temporarily-disrupts-gmail-service.html&#34;&gt;Google&lt;/a&gt;, at &lt;a href=&#34;http://status.teem.com/incidents/ddtys5ss4mw5&#34;&gt;Teem recently&lt;/a&gt;, and of course for myself with my own home server.
&lt;/p&gt;


 
  
  
  
  
    
      
    
  
    
      
    
  
    
  

 
  
  
  
  
    
  
    
      
    
  

&lt;div class=&#34;figure center&#34; &gt;
  
    &lt;a class=&#34;fancybox&#34; href=&#34;https://media.giphy.com/media/joV1k1sNOT5xC/giphy.gif&#34; title=&#34;Everything is fine&#34; data-fancybox-group=&#34;&#34;&gt;
  
    &lt;img class=&#34;fig-img&#34; src=&#34;https://media.giphy.com/media/joV1k1sNOT5xC/giphy.gif&#34;  alt=&#34;Everything is fine&#34;&gt;
  
    &lt;/a&gt;
  
   
    &lt;span class=&#34;caption&#34;&gt;Everything is fine&lt;/span&gt;
  
&lt;/div&gt;

  &lt;div style=&#34;clear:both;&#34;&gt;&lt;/div&gt;


&lt;p&gt;I got tired of this and hacked together a tool to warn when a cert is going to expire: &lt;a href=&#34;https://github.com/LucasRoesler/ssl-expiry-check&#34;&gt;ssl-expiry-check&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-script&#34;&gt;The script&lt;/h2&gt;

&lt;p&gt;Checking SSL expiration is actually relatively simple, all of the information is public, you just need to grab it and validate it. My little project is a Python 3 project and uses only the standard library so that it is easy to use in any Python 3 environment, in particular AWS Lambda.&lt;/p&gt;

&lt;p&gt;So, what does it take to validate an SSL cert?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import datetime
import logging
import socket
import ssl


logger = logging.getLogger(&#39;SSLVerify&#39;)


def ssl_expiry_datetime(hostname: str) -&amp;gt; datetime.datetime:
    ssl_date_fmt = r&#39;%b %d %H:%M:%S %Y %Z&#39;

    context = ssl.create_default_context()
    conn = context.wrap_socket(
        socket.socket(socket.AF_INET),
        server_hostname=hostname,
    )
    # 3 second timeout because Lambda has runtime limitations
    conn.settimeout(3.0)

    logger.debug(&#39;Connect to {}&#39;.format(hostname))
    conn.connect((hostname, 443))
    ssl_info = conn.getpeercert()
    # parse the string from the certificate into a Python datetime object
    return datetime.datetime.strptime(ssl_info[&#39;notAfter&#39;], ssl_date_fmt)


def ssl_valid_time_remaining(hostname: str) -&amp;gt; datetime.timedelta:
    &amp;quot;&amp;quot;&amp;quot;Get the number of days left in a cert&#39;s lifetime.&amp;quot;&amp;quot;&amp;quot;
    expires = ssl_expiry_datetime(hostname)
    logger.debug(
        &#39;SSL cert for {} expires at {}&#39;.format(
            hostname, expires.isoformat()
        )
    )
    return expires - datetime.datetime.utcnow()


def test_host(hostname: str, buffer_days: int=30) -&amp;gt; str:
    &amp;quot;&amp;quot;&amp;quot;Return test message for hostname cert expiration.&amp;quot;&amp;quot;&amp;quot;
    try:
        will_expire_in = ssl_valid_time_remaining(hostname)
    except ssl.CertificateError as e:
        return f&#39;{hostname} cert error {e}&#39;
    except ssl.SSLError as e:
        return f&#39;{hostname} cert error {e}&#39;
    except socket.timeout as e:
        return f&#39;{hostname} could not connect&#39;
    else:
        if will_expire_in &amp;lt; datetime.timedelta(days=0):
            return f&#39;{hostname} cert will expired&#39;
        elif will_expire_in &amp;lt; datetime.timedelta(days=buffer_days):
            return f&#39;{hostname} cert will expire in {will_expire_in}&#39;
        else:
            return f&#39;{hostname} cert is fine&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the core of this script is the &lt;code&gt;SSLSocket.getpeercert&lt;/code&gt; method, using Python&amp;rsquo;s &lt;code&gt;ssl&lt;/code&gt; and &lt;code&gt;socket&lt;/code&gt; modules, we connect to the provided &lt;code&gt;hostname&lt;/code&gt; on port 443 and then &lt;code&gt;getpeercert&lt;/code&gt; returns the SSL certificate as a dictionary. At this point you want the &lt;code&gt;notAfter&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;ssl-expiry&lt;/code&gt; tool, we parse the &lt;code&gt;notAfter&lt;/code&gt; value into a &lt;code&gt;timedelta&lt;/code&gt; object because we want to know if the certificate will expire soon (defaults to 30 days).&lt;/p&gt;

&lt;p&gt;If you checkout the source for &lt;code&gt;ssl-expiry&lt;/code&gt; you can quickly check if a certificate is expiring soon using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;google.com\nfacebook.com&amp;quot; | python ssl_expiry.py
&amp;gt; google.com cert is fine
&amp;gt; facebook.com cert is fine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending on your environment, you may need to explicitly call to &lt;code&gt;python3&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;google.com\nfacebook.com&amp;quot; | python3 ssl_expiry.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ssl-expiry-in-action&#34;&gt;SSL Expiry in Action&lt;/h2&gt;

&lt;p&gt;At this point, you could easily create a &lt;code&gt;cron&lt;/code&gt; job to run this regularly and notify you if the output contains &lt;code&gt;&amp;quot;expire&amp;quot;&lt;/code&gt;.  This is what I did for my home server. At Teem we use &lt;a href=&#34;https://newrelic.com/&#34;&gt;New Relic&lt;/a&gt; which provides an awesome tool called &lt;a href=&#34;https://newrelic.com/synthetics&#34;&gt;Synthetics&lt;/a&gt; that provides a cron-like tool that allows you to ping or GET against an API on regular intervals.  It will then trigger alerts that can be forwarded to your favorite on-call to (:cough:PagerDuty:cough:) if the request fails or the response does not contain an expected sub-string. With this tool available, I decided to deploy &lt;code&gt;ssl-expiry&lt;/code&gt; as an AWS Lambda function an expose it via an AWS API Gateway api.&lt;/p&gt;

&lt;p&gt;To simplify this deployment, I created a script specifically for Lambda, cleverly called &lt;a href=&#34;https://github.com/LucasRoesler/ssl-expiry-check/blob/master/ssl_expiry_lambda.py&#34;&gt;&lt;code&gt;ssl-expiry-lambda&lt;/code&gt;&lt;/a&gt; This script simply wraps &lt;code&gt;ssl-expiry&lt;/code&gt; so that the output is specialized to the format that Lambda and Gateway need so that I can&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Return a 200 if all of the requested hosts are valid for the next 30 days, or&lt;/li&gt;
&lt;li&gt;Return a 400 and the list of certificate test strings if at least one of the requested hosts is expired, will expire in the next 30 days, or is in some other way currently invalid.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this setup, it is very easy to use New Relic Synthetics to alert the on-call developers to any SSL certificate issues.  This also implicitly alerts us if any of the domains are inaccessible.&lt;/p&gt;

&lt;p&gt;I should note that New Relic Synthetics does have a &amp;ldquo;Validate SSL&amp;rdquo; option for any ping type checks that you configure.  However, this option does not include the preemptive &amp;ldquo;will expire soon&amp;rdquo; validation that I am looking for.&lt;/p&gt;

&lt;p&gt;Configuring Lambda and API Gateway was actually more time consuming that writing the script, mostly due to trying to get the API response just right. To deploy to Lambda, create a zip that contains &lt;code&gt;ssl_expiry.py&lt;/code&gt; and &lt;code&gt;ssl_expiry_lambda.py&lt;/code&gt; and then follow the normal instructions to setup and configure a Lambda function. The &lt;code&gt;ssl_expiry_lambda&lt;/code&gt; will use, if they exist, two env parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HOSTLIST&lt;/code&gt;: a comma separated string of &lt;code&gt;hostnames&lt;/code&gt; to validate, and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXPIRY_BUFFER&lt;/code&gt;: an int that represents the days prior to expiration that the script will alert for, i.e. alert if the expiration is within &lt;code&gt;EXPIRY_BUFFER&lt;/code&gt; days.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The entry point for the Lambda will be &lt;code&gt;ssl_expiry_lambda.main&lt;/code&gt;.  Set the &lt;code&gt;HOSTLIST&lt;/code&gt; env variable and you now have a default list of hostnames that will always be checked when calling this Lambda.&lt;/p&gt;

&lt;p&gt;AWS API Gateway was the trickiest to configure. The important parts that are not obvious from the API Gateway admin UI are as follows:&lt;/p&gt;

&lt;p&gt;You will need to create a new &amp;ldquo;Integration Response&amp;rdquo; for the exception that is raised when the check finds a failing or soon to fail certificate.&lt;/p&gt;

&lt;p&gt;I configured this new Integration Response with a regex of&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.*Cert Errors.*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and a &amp;ldquo;Body Mapping Template&amp;rdquo; with content type &lt;code&gt;application/json&lt;/code&gt; and the template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#set($inputRoot = $input.path(&#39;$&#39;))
$input.path(&#39;$.errorMessage&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this configuration, the exception raised by the &lt;code&gt;main&lt;/code&gt; method will be parsed and returned as the body of the response. The HTTP status code will be a 400.&lt;/p&gt;

&lt;p&gt;Additionally, in the &amp;ldquo;Method Request&amp;rdquo; section, I declared URL Query String Parameters for &lt;code&gt;host_list&lt;/code&gt; and &lt;code&gt;expiry_buffer&lt;/code&gt;.  This is helpful for testing the API, since the AWS UI will provide form fields for setting these parameters while testing it.&lt;/p&gt;

&lt;p&gt;Finally, you should also define a &amp;ldquo;Method Response&amp;rdquo; for the 400 status. This can be left with all for the default empty values for response headers and response body.&lt;/p&gt;

&lt;p&gt;With all of this in place, you now have an API that with a simple GET request, will validate the SSL certificates for a list of hostnames, including a warning for when certificates are about to expire. You can now sit back and relax knowing that you will be abruptly alerted as soon as any of your certificates are even close to expiring.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thank you to
&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/cleanslatephotography/7899423426/in/photolist-d33BnC-5osrTL-9cuiGG-ehWXkg-nRdREH-ey8CR5-nRacoG-4qDmXP-a25CPx-8MqVJU-qmXRpL-dU81E6-oicDNZ-fu8kkk-2fvgQ1-qBtgR4-pEgwwC-hdKjjd-9Z4bzn-4kMSQK-qvyyF9-q3EyRX-9A6kY9-p5vhpk-TiDVoG-obiQrS-9uKVDe-fFjqjy-8z7vh2-o1ApPq-6vaRSf-e14EyV-cqWEpd-cvgD9f-cavamS-oKiPxn-9qeT5j-9ZMc4V-e6k5Ak-bD1SrM-qxMZWj-dJBsh9-c1Q6Fj-9oQTJP-jvWBA7-65A1Yh-qdLuiW-bq7vVh-brsYNu-bkuUnp&#34; title=&#34;Unlocked&#34;&gt;Sam Stockton&lt;/a&gt; for the CC BY 2.0 image I used as the cover on this post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Your API&#39;s rat nest</title>
      <link>http://lucasroesler.com/2017/06/your-apis-rat-nest/</link>
      <pubDate>Mon, 05 Jun 2017 21:22:00 -0600</pubDate>
      
      <guid>http://lucasroesler.com/2017/06/your-apis-rat-nest/</guid>
      <description>&lt;p&gt;Recently, I have seen several articles talking about RESTful API design.  Of
course this is also a common topic of discussion for the engineers at Teem.  I
want to use (and write) APIs that are easy to understand and explain and the
fastest way to complicate your API is nested routes. Just don&amp;rsquo;t do it! Do not
create nested routes in your API.  Let&amp;rsquo;s keep our APIs simple and create one
endpoint per resource and if filters are needs, use GET parameters. This is
simpler to document and simpler to maintain and ultimately, easier to use.&lt;/p&gt;

&lt;p&gt;
In a RESTful API urls identify resources and identifiers should change
as infrequently as possible [&lt;a href=&#34;https://www.ics.uci.edu/
~fielding/pubs/dissertation/fielding_dissertation.pdf&#34;&gt;Fielding pg. 110&lt;/a&gt;].  The natural
consequence is that urls should contain the minimal information needed
to access a resource. For example, in an API with Users and Companies,
&lt;code&gt;/users/:userId&lt;/code&gt; is better than &lt;code&gt;/companies/:companyId/users/:userId&lt;/code&gt;.
If your user changes companies, then the identifier must change.  This is also
more complicated than it needs to be. The user&amp;rsquo;s &lt;code&gt;id&lt;/code&gt; should be enough to
access it from the database.&lt;/p&gt;

&lt;p&gt;Some people will argue that you solve the above problem by implementing
&lt;em&gt;both&lt;/em&gt; endpoints.  However, if you pair this with the Unix philosophy
&lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_philosophy#Do_One_Thing_and_Do_It_Well&#34;&gt;&amp;ldquo;Do One Thing and Do It Well&amp;rdquo;&lt;/a&gt;,
then you simply shouldn&amp;rsquo;t use nested routes. It is simpler to understand
an API that has only one way to access any given resource. Additionally,
any request that you can do with nested routes you can do with a non-nested
route and query parameters. This also reduces the complexity of
managing and testing endpoints because there is only one code path that
users/developers can use.  Basically, the non-nested endpoint is works
it works well, so why create another endpoint to clutter up the API?&lt;/p&gt;

&lt;p&gt;At the end of the day, APIs without nested routes are easier to build, easier
to maintain, and easier to consume.  This leads to happy devs and ultimately
happy users.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thank you to
&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/dookington/8445504396/in/photolist-dSiqdL-HoMKRm-a5BWuE-cQJcpj-5aQHDt-61PKYd-8kEUCJ-9psndx-2MYpnV-J8kzFb-dvmSjb-RCLYho-FiCvSu-6CMKpd-5xAM4H-3XTBB6-CGS8y3-CuucdJ-RfW4Pp-So3x7N-s1Vh8-m7cCmc-o92Zw4-b3SSGX-528Fwg-a3DqaD-8j9o5t-fy12R9-7xYWoU-dBJ3Gj-prjyoB-bY6Cdy-68bcuk-6Qkn9E-dSPirj-7Gyme1-fFTbHv-3cJ73y-bsKUze-svnwP6-7uH8S-RrmYp1-o29b6m-TcXH28-tfbf-4orsJt-ehk6kN-4pYNoQ-5Sw1iK-cxkJs7&#34; title=&#34;Wired&#34;&gt;Tom Ducat-White&lt;/a&gt; for the CC BY-NC-ND image I used as the cover on this post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Delete or not to delete</title>
      <link>http://lucasroesler.com/2017/04/delete-or-not-to-delete/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 -0700</pubDate>
      
      <guid>http://lucasroesler.com/2017/04/delete-or-not-to-delete/</guid>
      <description>&lt;p&gt;Should you remove data from the database or simply mark it as deleted?
At Teem we have a lot of data that we need to manage and often &amp;ldquo;physically&amp;rdquo;
deleting the data from disk can be problematic. Either the users simply wants
to undelete something or the deletion would cause problems for a log. The
generic solution to this problem is to soft delete/archive the data by adding
a &lt;code&gt;deleted_at&lt;/code&gt; timestamp field to the table and then filter all queries to
hide rows that have been marked as deleted.&lt;/p&gt;

&lt;!-- more /--&gt;

&lt;p&gt;This simple approach can take you a long way but doesn&amp;rsquo;t fully cover all the
required scenarios. More specifically, what do you do with related objects?
About a year ago, I realized that we really needed to address the
entire problem. There are several pieces of data that we never want to delete,
e.g. devices and visitors among others. At the time I couldn&amp;rsquo;t find a really
good solution so I wrote my own:
&lt;a href=&#34;https://github.com/LucasRoesler/django-archive-mixin&#34;&gt;django-archive-mixin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As of today, there are at least two other options that cover this situation as
well and you should checkout too:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/scoursen/django-softdelete&#34;&gt;django-softdelete&lt;/a&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/makinacorpus/django-safedelete&#34;&gt;django-safedelete&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The biggest distinction between our project and the ones above is that I tried
to stay as close to the delete logic used in the original Django source code as
possible.  In particular, this means  mimicking Django&amp;rsquo;s &lt;code&gt;collector&lt;/code&gt; code that
implements the ORM cascade delete.  It is interesting to note that Django does
not rely on the database&amp;rsquo;s cascade functionality but instead manages the delete
process itself. The benefit of doing this is that you can then specify behavior
at delete time via the &lt;code&gt;on_delete&lt;/code&gt; argument to the model field.  For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Car(models.Model):
    manufacturer = models.ForeignKey(
        &#39;production.Manufacturer&#39;,
        blank=True, null=True
        on_delete=models.SET_NULL,
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will cause the manufacturer field to be set to &lt;code&gt;None&lt;/code&gt; when you delete the
related manufacture. The default behavior would be to delete the car instance
as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/1.10/ref/models/fields/#django.db.models.ForeignKey.on_delete&#34;&gt;Django provides 6 on_delete
options&lt;/a&gt;:
&lt;code&gt;CASCADE&lt;/code&gt;, &lt;code&gt;PROTECT&lt;/code&gt;, &lt;code&gt;SET_NULL&lt;/code&gt;, &lt;code&gt;SET_DEFAULT&lt;/code&gt;, &lt;code&gt;SET()&lt;/code&gt;, and &lt;code&gt;DO_NOTHING&lt;/code&gt;.
At delete, the Django &lt;code&gt;collector&lt;/code&gt; crawls the relationships and
buckets each object found into different lists depending on the &lt;code&gt;on_delete&lt;/code&gt;
configuration for that specific relationship.  &lt;code&gt;CASCADE&lt;/code&gt; puts the object in a
bucket to be deleted, &lt;code&gt;PROTECT&lt;/code&gt; will cause an exception to be thrown,
&lt;code&gt;SET_NULL&lt;/code&gt;, &lt;code&gt;SET_DEFAULT&lt;/code&gt;, and &lt;code&gt;SET()&lt;/code&gt; each cause and update to that instance,
and &lt;code&gt;DO_NOTHING&lt;/code&gt; is a no-op. Once I understood this process, I decided to
piggyback on the process and add an additional piece of logic to put more
objects into the update bucket. Essentially, I allow Django to do all of the
collection for me and then I go through the list of objects to inspect if it
should be archived instead, if it is, I move it to the update bucket and move
on.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def cascade_archive(inst_or_qs, using, keep_parents=False):
    &amp;quot;&amp;quot;&amp;quot;
    Return collector instance that has marked ArchiveMixin instances for
    archive (i.e. update) instead of actual delete.

    Arguments:
        inst_or_qs (models.Model or models.QuerySet): the instance(s) that
            are to be deleted.
        using (db connection/router): the db to delete from.
        keep_parents (bool): defaults to False.  Determine if cascade is true.

    Returns:
        models.deletion.Collector: this is a standard Collector instance but
            the ArchiveMixin instances are in the fields for update list.
    &amp;quot;&amp;quot;&amp;quot;
    from .mixins import ArchiveMixin

    if not isinstance(inst_or_qs, models.QuerySet):
        instances = [inst_or_qs]
    else:
        instances = inst_or_qs

    deleted_ts = timezone.now()

    # The collector will iteratively crawl the relationships and
    # create a list of models and instances that are connected to
    # this instance.
    collector = models.deletion.Collector(using=using)
    if StrictVersion(django.get_version()) &amp;lt; StrictVersion(&#39;1.9.0&#39;):
        collector.collect(instances)
    else:
        collector.collect(instances, keep_parents=keep_parents)
    collector.sort()

    for model, instances in collector.data.iteritems():
        # remove archive mixin models from the delete list and put
        # them in the update list.  If we do this, we can just call
        # the collector.delete method.
        inst_list = list(instances)

        if issubclass(model, ArchiveMixin):
            deleted_on_field = get_field_by_name(model, &#39;deleted_on&#39;)
            collector.add_field_update(
                deleted_on_field, deleted_ts, inst_list)

            del collector.data[model]

    for i, qs in enumerate(collector.fast_deletes):
        # make sure that we do archive on fast deletable models as
        # well.
        model = qs.model

        if issubclass(model, ArchiveMixin):
            deleted_on_field = get_field_by_name(model, &#39;deleted_on&#39;)
            collector.add_field_update(deleted_on_field, deleted_ts, qs)

            collector.fast_deletes[i] = qs.none()

    return collector
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I love about this logic is that is is a fairly small change to how
deletion works while also being fairly low-level enough that it covers all of
the deletion cases that the Django ORM handles.&lt;/p&gt;

&lt;p&gt;We have been using this mixin for about a year now with no hiccups. It works as
expected and hasn&amp;rsquo;t really needed much attention. If you are using Django and
have been looking for a safe delete/archive utility
&lt;a href=&#34;https://github.com/LucasRoesler/django-archive-mixin&#34;&gt;check it out&lt;/a&gt; and let me
know what you think.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I Git</title>
      <link>http://lucasroesler.com/2017/03/how-i-git/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 -0600</pubDate>
      
      <guid>http://lucasroesler.com/2017/03/how-i-git/</guid>
      <description>&lt;p&gt;Perhaps the one piece of ubiquitous technology that you will find at any new
tech company is &lt;code&gt;git&lt;/code&gt;.  There are a couple of other technologies that you will
probably find, like AWS, but &lt;code&gt;git&lt;/code&gt; is the only one I expect to find everywhere. It is
also, surprisingly, many developers number one frienemy.  I want to share some
of my favorite tips and tweaks that I have used over the years to make it all
friend and never my enemy.
&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s get this out of the way.  I like &lt;code&gt;git&lt;/code&gt;, a lot. I am one of the odd
people that think it makes sense. I can&amp;rsquo;t defend how complex it can sometimes
get, but I think that by and large the design and philosophy works for me and
I can do a lot with it.&lt;/p&gt;

&lt;h1 id=&#34;best-practices&#34;&gt;Best Practices&lt;/h1&gt;

&lt;h2 id=&#34;branching&#34;&gt;Branching&lt;/h2&gt;

&lt;p&gt;Use 2 permanent branches &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt; with ephemeral branches for
&lt;code&gt;features&lt;/code&gt; and &lt;code&gt;hotfix&lt;/code&gt;es.  Many people will advocate for other branching
strategies but I think that this model is easy to convey and easy to mentally
track. All new code is merged into &lt;code&gt;develop&lt;/code&gt; and when you are ready to release
something you merge &lt;code&gt;develop&lt;/code&gt; into &lt;code&gt;master&lt;/code&gt; and then tag the HEAD of &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Need to fix a bug in production? Create a &lt;code&gt;hotfix&lt;/code&gt; branch off of &lt;code&gt;master&lt;/code&gt;,
merge that into &lt;code&gt;master&lt;/code&gt;, tag it, deploy, and then merge master back into
&lt;code&gt;develop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Want to build the next cool feature? Create a &lt;code&gt;feature&lt;/code&gt; branch off of
&lt;code&gt;develop&lt;/code&gt; and then merge that back into &lt;code&gt;develop&lt;/code&gt; when you are done and move on
to the next hot thing.&lt;/p&gt;

&lt;p&gt;I like this pattern because it is simple and gives you quite a bit of control
over what happens when. I have seen many people advocate for a single &lt;code&gt;master&lt;/code&gt;
branch that everything goes into. But, unless you have really good test
coverage and are doing true continuous integration where every commit is
deployable; the single branch policy will eventually breakdown on a team of any
reasonable size. It simply requires a discipline that I haven&amp;rsquo;t seen larger
teams maintain.&lt;/p&gt;

&lt;p&gt;At Teem, we use one more semi-permanent branch we lovingly refer to as the
&lt;code&gt;release&lt;/code&gt; branch.  For each release (we release weekly) we branch off of
develop into a branch named &lt;code&gt;release-&amp;lt;version_num&amp;gt;&lt;/code&gt;.  We then deploy
this to a staging server for QA to validate. Having this additional branch
allows development of new features to keep going without causing a lot of
headache or confusion about what is in the release and if QA finds an issue,
how to merge the fix for that release.  Everything for that release is branched
from and merged back into the &lt;code&gt;release&lt;/code&gt; branch. Finally, when it is time to
release, we merge the &lt;code&gt;release&lt;/code&gt; branch into &lt;code&gt;master&lt;/code&gt; and tag the HEAD. Backport
&lt;code&gt;master&lt;/code&gt; into &lt;code&gt;develop&lt;/code&gt;, rinse and repeat.&lt;/p&gt;

&lt;h2 id=&#34;branch-names&#34;&gt;Branch names&lt;/h2&gt;

&lt;p&gt;Please, for the love of all that is good, use descriptive branch names. I
suggest the following naming patterns&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;feature-&amp;lt;ISSUE_ID&amp;gt;-short-summary-of-branch
hotfix-&amp;lt;ISSUE_ID&amp;gt;-short-summary-of-branch
releasefix-&amp;lt;ISSUE_ID&amp;gt;-short-summary-of-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Doing this allows anyone that is reviewing that branch to have some idea of
where that merge should be going, e.g. &lt;code&gt;feature&lt;/code&gt; branches merge into &lt;code&gt;develop&lt;/code&gt;
not &lt;code&gt;master&lt;/code&gt;.  Having the issue id (we use JIRA, but this could be the id from
any ticket tracker) allows people to reference what the branch should be
addressing, be that a bug report or a user story.  And finally, a short summary
makes the branch descriptive and easier to use. I also recommend this pattern
because it then becomes easy to create a changelog from the git log of merges.&lt;/p&gt;

&lt;h2 id=&#34;commit-messages&#34;&gt;Commit Messages&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s get the less contentious piece of advice out of the way, commit messages
should be informative and well structured.  I have generally followed the
advice of
&lt;a href=&#34;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&#34;&gt;tpope&lt;/a&gt;
and the
&lt;a href=&#34;https://www.git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#Commit-Guidelines&#34;&gt;&lt;code&gt;git&lt;/code&gt; handbook&lt;/a&gt;
but with a slight tweak. Here is a example commit message&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Capitalized, short (50 chars or less) summary

**What**
- Bullet pointed list of changes you made. 
- Each line should be no longer than 72 characters.
- For example:
- Switch from o365 beta API to the v1 API

**Why**
- Again a bulleted list of reasons you made that change.
- Again, no longer than 72 characters.
- For example:
- The v1 API is now stable and the beta API contains breaking changes with the
v1 api.

**Notes**
- Any additional notes for peer reviewers or to add additional context. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most important thing to remember, this message is supposed to inform people
about what is happening in the project without them needing to read every file.
For peer review, it is important that they can recognize what is intended to be
in the change set and what should not be there. One-line messages help no one.&lt;/p&gt;

&lt;p&gt;To help ensure that you write a half-decent commit message, &lt;code&gt;git&lt;/code&gt; has a feature
where called &lt;code&gt;.gitmessage&lt;/code&gt;.  Create a file called &lt;code&gt;.gitmessage&lt;/code&gt; in your home
folder and put this in it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Captialized, short (50 chars or less) summary

**What**
-

**Why**
-

**Notes**
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;git&lt;/code&gt; will now use that as the template/initial text in all of your commit
messages.&lt;/p&gt;

&lt;p&gt;Note, it will not have any impact on specifying the commit message when using
&lt;code&gt;git -m&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;commits&#34;&gt;Commits&lt;/h2&gt;

&lt;p&gt;Something that is probably not so contentious: I believe in
committing frequently.  And now something slightly more contentious: I believe
in using rebase to create a sensible history that makes something like
&lt;code&gt;cherry-pick&lt;/code&gt; simple to use. I generally believe that you should work on small
chunks of code that can be reasonably described in a single commit with one or
two comments in the &amp;ldquo;What&amp;rdquo; section of my commit message. I also believe that
you should break coding style fixes, e.g PEP8 fixes, into separate commits so
that they can be reviewed separately. To actually make all of these ideas play
nicely together I use rebase frequently. I squash my frequent small commit into
larger (but still fairly small) semantic pieces of history, so my git log will
go from something like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sha1 - &amp;quot;Add new contact method&amp;quot;
sha2 - &amp;quot;Fix typo in contact method&amp;quot;
sha3 - &amp;quot;Add new unit test&amp;quot;
sha4 - &amp;quot;Fix bug found by unit test&amp;quot;
sha5 - &amp;quot;Fix PEP8 issues with imports&amp;quot;
sha6 - &amp;quot;Fix PEP8 issues with line lengths&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to something like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sha1&#39; - &amp;quot;Add new contact method and unit test&amp;quot;
sha2&#39; - &amp;quot;Fix PEP8 issues&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This history makes it easy to cherry-pick or revert the new feature and it
makes it easier for peer reviewers to review the logic change in &lt;code&gt;sah1&#39;&lt;/code&gt;
independently of the potentially noisy and distracting PEP8 changes in &lt;code&gt;sha2&#39;&lt;/code&gt;.
To do this I make heavy use &lt;code&gt;git rebase -i&lt;/code&gt; to selectively squash commits.  I
have also created an aliases called &lt;code&gt;git fixup&lt;/code&gt; that will simply squash my
staged changes into my previous commit. More on aliases later.&lt;/p&gt;

&lt;h2 id=&#34;on-rebasing&#34;&gt;On rebasing&lt;/h2&gt;

&lt;p&gt;I do not intend to give a full defense of rebasing here. I will say this; if
you are not comfortable with &lt;code&gt;git&lt;/code&gt;, then rebasing may not be for you.  Almost
everything else you do in &lt;code&gt;git&lt;/code&gt; is fairly safe, there is a way to recover from
what you are doing, this is why I like and trust &lt;code&gt;git&lt;/code&gt;.  However, &lt;code&gt;rebase&lt;/code&gt; is
one of those commands that is not always recoverable and you often have to
simply live with the end results. With that said, if you are using rebase
especially if you are using &lt;code&gt;pull -r&lt;/code&gt;, which is a standard pull that uses
rebase instead of merge, then you must enable and configure the &lt;code&gt;rerere&lt;/code&gt;
feature. Quick, update your &lt;code&gt;~/.gitconfig&lt;/code&gt; to have&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[rerere]
    enabled = 1
    autoupdate = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will thank me. From the &lt;a href=&#34;https://git-scm.com/blog/2010/03/08/rerere.html&#34;&gt;git
book&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The name stands for &amp;ldquo;reuse recorded resolution&amp;rdquo; and as the name implies, it
 allows you to ask Git to remember how you&amp;rsquo;ve resolved a hunk conflict so
 that the next time it sees the same conflict, Git can automatically resolve
 it for you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basically, while you are rebasing, if you have a conflict that you resolve, git
will now remember that resolution and automatically apply it again in the
future.  This is huge for &lt;code&gt;git pull -r&lt;/code&gt;, which will often replay the same
section of your history and therefore run into the same conflict over and over.
Honestly, I don&amp;rsquo;t think rebase is usable without enabling &lt;code&gt;rerere&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;aliases&#34;&gt;Aliases&lt;/h1&gt;

&lt;p&gt;Any post on &lt;code&gt;git&lt;/code&gt; can not be complete without a list of handy-dandy aliases and
commands.  So, here are mine.  I have roughly 3 categories of aliases: audit
and cleanup, historical logging, and commit helpers.&lt;/p&gt;

&lt;h2 id=&#34;audit-and-cleanup&#34;&gt;Audit and cleanup&lt;/h2&gt;

&lt;p&gt;The following commands help me clean up old branches&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;audit = !git branch --merged | grep -v &#39;\*\|master\|develop\|release-&#39;
clean-audit = !git branch --merged | grep -v &#39;\*\|master\|develop\|release-&#39; | xargs -n 1 git branch -d
b = !git for-each-ref --sort=&#39;-authordate&#39; --format=&#39;%(authordate)%09%(objectname:short)%09%(refname)&#39; refs/heads | sed -e &#39;s-refs/heads/--&#39;
trim = !git reflog expire --expire=now --all &amp;amp;&amp;amp; git gc --prune=now
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use &lt;code&gt;audit&lt;/code&gt; and &lt;code&gt;clean-audit&lt;/code&gt; the most frequently.  &lt;code&gt;audit&lt;/code&gt; simply lists my
local branches that have already been merged (except for &lt;code&gt;master&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt;,
and the &lt;code&gt;release&lt;/code&gt; branches) and hence are not needed anymore. &lt;code&gt;clean-audit&lt;/code&gt;
simply extends that command to delete the listed branches.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;b&lt;/code&gt; alias prints a summary of all local branches, it looks likes this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fri Mar 17 16:19:24 2017 -0600	4d2a351	master
Fri Mar 17 15:08:31 2017 -0600	d9ce23e	release-17.12.01
Fri Mar 17 13:21:34 2017 -0600	a5d5f73	develop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use &lt;code&gt;trim&lt;/code&gt; pretty sparingly. It simply cleans up old branch pointers that are
not being used as of &amp;ldquo;now&amp;rdquo;.  This can be useful to reclaim some space after you
do &lt;code&gt;clean-audit&lt;/code&gt;.  I only recommend this command if you have OCD.&lt;/p&gt;

&lt;h2 id=&#34;historical-logging&#34;&gt;Historical Logging&lt;/h2&gt;

&lt;p&gt;The following commands will print your &lt;code&gt;git log&lt;/code&gt; in fun, potentially
informative, ways:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;graph = log --graph --oneline --decorate --all
l = log --pretty=format:%C(yellow)%h\ %ad%Cred%d\ %Creset%s%Cblue\ [%cn] --decorate --date=short
ll = log --pretty=format:%C(yellow)%h%Cred%d\ %Creset%s%Cblue\ [%cn] --decorate --numstat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming that you and your team are writing good summary lines in your commit
messages, these commands can be used to quickly find when a certain commit
happened.  I don&amp;rsquo;t use these frequently, but they have been useful when trying
to find when something happened in the repo.  &lt;code&gt;git l&lt;/code&gt; is great a really short
summary of the history, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;af1f3ec 2017-03-05 (HEAD -&amp;gt; source-hugo, origin/source-hugo) Site rebuild Sun Mar  5 13:53:22 MST 2017 [Lucas Roesler]
ddfdd9d 2017-03-05 Post new spring hefe beer post [Lucas Roesler]
e5bd906 2017-02-25 Site rebuild Sat Feb 25 13:33:12 MST 2017 [Lucas Roesler]
bd21f27 2017-02-25 Add a reading list page [Lucas Roesler]
dad0fbb 2017-02-18 Site rebuild Sat Feb 18 20:20:50 MST 2017 [Lucas Roesler]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need a little more detail, &lt;code&gt;git ll&lt;/code&gt; will show you the change stats as
well as the summary that you get in &lt;code&gt;git l&lt;/code&gt;, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;af1f3ec (HEAD -&amp;gt; source-hugo, origin/source-hugo) Site rebuild Sun Mar  5 13:53:22 MST 2017 [Lucas Roesler]
21      1       public/2017/01/hello/index.html
21      1       public/2017/01/my-management-philosophy/index.html
21      1       public/2017/01/spicy-winter-porter/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;commit-helpers&#34;&gt;Commit helpers&lt;/h2&gt;

&lt;p&gt;I only have one alias related to commits &lt;code&gt;fixup&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fixup=!git commit --amend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will take your staged changes and immediately squash them into the
previous commit.  This is great for fixing small typos and simply reduces the
amount of time I need to spend in &lt;code&gt;rebase&lt;/code&gt;. This is by far my most frequently
used alias.&lt;/p&gt;

&lt;h2 id=&#34;adding-aliases&#34;&gt;Adding aliases&lt;/h2&gt;

&lt;p&gt;Adding these aliases to your system is pretty simple. In your &lt;code&gt;~/.gitconfig&lt;/code&gt;
file, add or update the &lt;code&gt;[alias]&lt;/code&gt; section with the snippets I shared above. My
config file looks like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[alias]
    fixup=!git commit --amend

    # cleanup old branches
    audit = &amp;quot;!git branch --merged | grep -v &#39;\\*\\|master\\|develop\\|release-&#39;&amp;quot;
    clean-audit = &amp;quot;!git branch --merged | grep -v &#39;\\*\\|master\\|develop\\|release-&#39; | xargs -n 1 git branch -d&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Git is a powerful tool, one of my favorites. I like a semantic git logs, so I
use rebase. You don&amp;rsquo;t have to do this. But, you better write good commit
messages :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zero downtime deploys: A tale of Django migrations</title>
      <link>http://lucasroesler.com/2017/02/zero-downtime-deploys-a-tale-of-django-migrations/</link>
      <pubDate>Mon, 20 Feb 2017 00:00:00 -0700</pubDate>
      
      <guid>http://lucasroesler.com/2017/02/zero-downtime-deploys-a-tale-of-django-migrations/</guid>
      <description>&lt;p&gt;At Teem, we aim for zero down-time deploys; so, one of the most
important things we must validate is that things will not break mid-deploy!&lt;/p&gt;

&lt;p&gt;The most sensitive step of the deploy process is the changes to our database.
Prior to the automation I am about to describe, validation of the database
migrations required specialized knowledge about Postgres, the changes to the
application model, load on the database for that model, and a bit of general
experience. This obviously slows down reviews and subsequently deploys. Worse,
it was simply too easy to miss problem migrations when depending on only peer
reviews. To make our lives easier we created a series of validation checks to
ensure that each database migration will be backwards compatible.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-what&#34;&gt;The what&lt;/h2&gt;

&lt;p&gt;The checks I am going to describe are simply a sequence of regex
that we run on the migrations in the changelog. The process looks, roughly,
like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using git, generate a list of new migrations in this release,&lt;/li&gt;
&lt;li&gt;Using Django&amp;rsquo;s &lt;code&gt;sqlmigrate&lt;/code&gt; manage command, generate the SQL for each
migration,&lt;/li&gt;
&lt;li&gt;Run a sequence of regex on each SQL command,&lt;/li&gt;
&lt;li&gt;Report the issues,&lt;/li&gt;
&lt;li&gt;Profit!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We do this in a python script we internally call &lt;code&gt;octoeb&lt;/code&gt; which uses
&lt;a href=&#34;http://click.pocoo.org/5/&#34;&gt;Click&lt;/a&gt; to create a commandline
interface.  So, I can get a changelog along with an audit of the migrations
in my current branch using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ocotoeb changelog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I won&amp;rsquo;t describe the specific python code, instead I will give you equivalent bash commands
that you can run in your CLI and a simple description of the regex that we
are using. This will give you all the pieces you need to build a similar script
in your favorite language.&lt;/p&gt;

&lt;h2 id=&#34;the-why&#34;&gt;The why&lt;/h2&gt;

&lt;p&gt;The basic goal is to ensure that any applied migrations are backwards
compatible with the model definitions in the currently deployed release. This
is a requirement because our current deployment process looks like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;pull the new release code to a single server,&lt;/li&gt;
&lt;li&gt;run the migrations,&lt;/li&gt;
&lt;li&gt;restart the application,&lt;/li&gt;
&lt;li&gt;check the application status,&lt;/li&gt;
&lt;li&gt;slowly roll the code to the rest of the servers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a result, during a deploy we have a mix of old model definitions and new
model definitions running simultaneously.  This means that the database must
except both the old and the new for a short period of time and that any change we make
to the database should not lock up an entire table.&lt;/p&gt;

&lt;p&gt;Probably the most common change we often want to make is simply adding a new
column to an existing model.  This can present several issues.  First, your new
column should not set a default.  In postgres, adding a column with a default will
lock the table while it rewrites the existing rows with the default.  This can
easily be avoided by adding the column first without the default, then adding
the default, followed by a future backfill on the existing rows.  This will
create the column and all future rows will have the default.&lt;/p&gt;

&lt;p&gt;Implicit in the above recommendation is that all new columns must be nullable.
You can not add a column without a default unless you allow null. Additionally,
while the old models are running against the new table definitions, the app
will set a value for that column, so it must either have a default or allow
null otherwise Postgres will throw an error.&lt;/p&gt;

&lt;p&gt;Finally, the other change that we need to watch for is removing columns. This
is a multi-step process. If you drop a column while the old models are still
active you will get two possible errors (1) when Django tries to select on
that column that no longer exists (which it will because it always explicitly
names the columns selected) or (2) attempting to insert data to a column that
doesn&amp;rsquo;t exist anymore. To actually handle this type of model change you must
deploy the model change prior to running the migration.  In our process, that
means you must commit the model change in a release separate from the database
migration.&lt;/p&gt;

&lt;p&gt;There are certainly other cases to consider, but we have found these 3 cases to
cover the vast majority of our migration concerns. Having put these checks into
place, we rarely have any issues with database migrations during deploy.&lt;/p&gt;

&lt;h2 id=&#34;the-how&#34;&gt;The how&lt;/h2&gt;

&lt;h3 id=&#34;getting-your-list-of-migrations&#34;&gt;Getting your list of migrations&lt;/h3&gt;

&lt;p&gt;To find the new migrations you can run the following command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --name-status master.. | grep -e  &amp;quot;^[MA].*migrations.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Breaking this down, &lt;code&gt;git log --name-status master..&lt;/code&gt; will print a log of the
commits and the file changes in each commit between &lt;code&gt;master&lt;/code&gt; and the current
&lt;code&gt;HEAD&lt;/code&gt;.  The &lt;code&gt;grep&lt;/code&gt; returns only those lines that start with &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;M&lt;/code&gt; and
also contains the work &lt;code&gt;migrations&lt;/code&gt;.  These are all of the new or modified
migration files.  It will return something like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A	apps/accounts/migrations/0019_auto_20170126_1830.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getting-your-sql&#34;&gt;Getting your SQL&lt;/h3&gt;

&lt;p&gt;Once you have the list of migration files that you need to check, we need to
get the actual SQL that is going to be run by Django.  Fortunately, Django
provides a simple command to get this SQL,
&lt;a href=&#34;https://docs.djangoproject.com/en/1.10/ref/django-admin/#sqlmigrate&#34;&gt;&lt;code&gt;sqlmigrate&lt;/code&gt;&lt;/a&gt;.
For example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;django-admin sqlmigrate account 0002
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will print the sql for the second migration in the &lt;code&gt;accounts&lt;/code&gt; app. In the
pervious section the ouput contains all of the information that we need.
Specifically, with a command like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --name-status master.. | grep -e  &amp;quot;^[AM].*migrations.*&amp;quot; | cut -d / -f 2,4 | cut -d . -f 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we would get back exactly the list of apps and the migration name for each
migration that we need to check&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;accounts/0017_auto_20170126_1342
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This still isn&amp;rsquo;t quite what we need.  At the end of the day the following
command will generate the SQL for you&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --name-status master.. | grep -e  &amp;quot;^[AM].*migrations.*&amp;quot; | cut -d / -f 2,4 | cut -d . -f 1 | awk -F&amp;quot;/&amp;quot; &#39;{ print $1,$2}&#39; | xargs -t -L 1 django-admin sqlmigrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using python for our scripting, so my script is actually a bit
different, using the regex &lt;code&gt;apps/((.*)/migrations/(\d+[0-9a-z_]*))\.py&lt;/code&gt; and a
combination of a for loop and subprocess to generate the SQL.&lt;/p&gt;

&lt;h3 id=&#34;regex-magic&#34;&gt;Regex magic&lt;/h3&gt;

&lt;p&gt;Now that we have the actual SQL that needs to be tested, it is simply a matter
of running a few regex tests. We have 3 core tests that we run:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;check_for_not_null&lt;/code&gt; which we test using &lt;code&gt;/NOT NULL/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_for_dropped_columns&lt;/code&gt; which we test using &lt;code&gt;/DROP COLUMN/&lt;/code&gt;,
and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_for_add_with_default&lt;/code&gt; which we test using &lt;code&gt;/ADD COLUMN .* DEFAULT/&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each migration, we test those 3 regex and alert if they have any matches.
As I mentioned earlier, there are certainly other cases that could be
considered. Let me know if there are some additional checks I should add.
Since we have implemented these checkes, I can&amp;rsquo;t remember the last time we had
a migration issue during a deploy so they seem to cover most of the use cases
we run into.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Postgres Joins and Django Querysets</title>
      <link>http://lucasroesler.com/2017/02/postgres-joins-and-django-querysets/</link>
      <pubDate>Mon, 06 Feb 2017 20:00:00 +0000</pubDate>
      
      <guid>http://lucasroesler.com/2017/02/postgres-joins-and-django-querysets/</guid>
      <description>&lt;p&gt;How do we build a fast API against database models with foreign keys and many-
to-many relationships?  If you do nothing you get what I call the &amp;ldquo;waterfall of
doom&amp;rdquo;. At some point in the past someone told me or I read that &amp;ldquo;joins are
effectively free in Postgres&amp;rdquo;.  While this might be somewhat true when you are
writing all of the SQL and can control every part of your query; I have recently
found that when the database gets big enough and you are using the Django ORM,
joins aren&amp;rsquo;t free and less can be more!&lt;/p&gt;

&lt;p&gt;Warning, I am not a DBA and mileage may vary.&lt;/p&gt;

&lt;!-- more /--&gt;

&lt;p&gt;At &lt;a href=&#34;https://teem.com&#34;&gt;Teem&lt;/a&gt; we deal with a lot of calendar data.  For various
reasons this means we have database tables that looks something like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+----------------------+    +----------------------+
|Calendar              |    |Event                 |
|========              |    |=====                 |
|- id                  |    |- id                  |
|- source              |    |- organization_id     |
|- organization_id     |    |- calendar_id         |
|                      |    |- organizer_id        |
+----------------------+    |- title               |
                            |- start_at            |
                            |- end_at              |
                            +----------------------+
+----------------------+    +----------------------+
|Participant           |    |Organizer             |
|===========           |    |=========             |
|- id                  |    |- id                  |
|- organization_id     |    |- organization_id     |
|- event_id            |    |- event_id            |
|- email               |    |- name                |
|- name                |    |- email               |
+----------------------+    +----------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(&lt;em&gt;Note this is not how it is actually setup in production.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Now, you can be happy or upset with the design for various reasons
but my biggest issue is how Django queries these tables for our API.  The
simplest most direct way to serialize an Event including its calendar,
organizer, and the participants cause what I call the &amp;ldquo;waterfall of doom&amp;rdquo;,
a.k.a. the N+1 problem. This topic is covered in many places throughout the
internet, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/&#34;&gt;Performance: N+1 Query Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/97197/what-is-the-n1-selects-problem&#34;&gt;What is the n+1 selects problem?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;so I won&amp;rsquo;t focus on it here; but basically, every request for an Event results
in 4 more requests (&lt;em&gt;the waterfall&lt;/em&gt;) for Organization, Calendar, Organizer, and
the Participants respectively.  Even worse, if I request a list of Events the
simplest code for the API will do 4 database queries for each Event in the list
(&lt;em&gt;the waterfall of doom&lt;/em&gt;). For a single event this isn&amp;rsquo;t noticeable, but if I
want to serialize all events in a calendar, it is a big performance problem.&lt;/p&gt;

&lt;p&gt;We use &lt;a href=&#34;http://www.django-rest-framework.org/&#34;&gt;Django Rest Framework&lt;/a&gt;, so the
simple (and bad) Event serialization described above looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class EventSerializer(ModelSerializer):
    organizer = OrganizerSerializer(read_only=True)
    calendar =  CalendarSerializer(read_only=True)
    organization = OrganizationSerializer(read_only=True)
    participants = ParticipantSerializer(
        source=&#39;participant_set&#39;, many=True, read_only=True)

    class Meta:
        fields = (
            &#39;id&#39;, &#39;start_at&#39;, &#39;end_at&#39;, &#39;title&#39;,
            &#39;organizer&#39;, &#39;calendar&#39;, &#39;organization&#39;, &#39;participants&#39;,
        )

class EventViewSet(ReadOnlyModelViewSet):
    queryset = Event.objects.all()
    serializer_class = EventSerializer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is worth noting that this is clearly not how our production API is currently
designed; but, it demonstrates the core performance issue. Fortunately,
&lt;a href=&#34;https://docs.djangoproject.com/en/1.10/topics/db/optimization/#retrieve-everything-at-once-if-you-know-you-will-need-it&#34;&gt;Django provides a couple tools&lt;/a&gt;
out of the box to help us solve this performance issue: &lt;code&gt;prefetch_related&lt;/code&gt;
and  &lt;code&gt;select_related&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are familiar with Django, then this is not news to you.  Given the setup
above you would likely jump on &lt;code&gt;select_related&lt;/code&gt; and call it a day, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class EventViewSet(ReadOnlyModelViewSet):
    queryset = Event.objects.select_related(
        &#39;organizer&#39;, &#39;calendar&#39;, &#39;participant_set&#39;).all()
    serializer_class = EventSerializer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, for a short time, this optimization worked for us; but a problem pops
up when the database starts getting big.  The above ViewSet will generate SQL
like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT COUNT(*) FROM (
    SELECT DISTINCT ON (
        e.start_at, e.end_at, e.title
        )
        e.*,
        o.*
    FROM event e
        LEFT OUTER JOIN participant p
            ON ( e.id = p.event_id )
        LEFT OUTER JOIN organizer o
            ON ( e.id = o.event_id )
    WHERE (
        e.calendar_id =  5051
        AND e.start_at &amp;lt;= &#39;2016-12-02 00:00:00+00:00&#39;
        AND e.end_at &amp;gt;= &#39;2016-12-01 00:00:00+00:00&#39;
        AND (
            UPPER(p.email::text) = UPPER(&#39;name@example.com&#39;)
            OR UPPER(o.email::text) = UPPER(&#39;name@example.com&#39;)
        )
    )
    ORDER BY
        e.start_at ASC,
        e.end_at ASC,
        e.title ASC,
) sub;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which looks good, but here is the problem&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/42eujc1S4_syWt2a64akZ28YxvBPofo2vHeJLWE_OwwSyruc_xLZvoe2RPIsRHHM_hTqHgjT6tH1-v9U76juQ2Ik7qInTADCbMpqFJC-hIswhJt8u36Y4dXdla9ffOy1GkI2OFxO_OXsSlDpjJJEUJs3cew54TEiLOT7zupFmzyA2LVGf8aYExjzKpYIQLdctzPPk59ecdNlhtscFZNl6Q47vHKyyq04CYOaHHop-KrOJMVAsorJbb8EYeVnrcanmM6Iowy5hkfRa2NuUMEvzOnd3hoZPxSVxNRTZukULPTsgCmTw5-cbUQi_9T3zrIRpypqEzjH1WaCaBeTtzBJlncNEC6MYM1GFP7e68qBMZpuAIzO-i4i43dTY5n3IfpY--ESYXtOp6xhKEWvOIDUtYGxXNow7HOWuluiOC0rWffxdDUWgDgv_CAAmVBCIWMvUXPOinz2N18V28-SeMsLG7Lsi6CiMu4ZfJGA44m6vY1CAi_3pQTXdB7xr1YU05Bzu4qyJiV0hRThIrC3GIj4nPo0wxI1PYneHY-AnAXmxVpMerQkKdtYpglv3DuJQraoxJg9Iu_nxoQO73fi6C7ZXisrVj-wCZE6_HsRYlsm5Yp_kH365gsX=w1440-h476-no&#34; alt=&#34;Example Performance with select_related&#34; /&gt;&lt;/p&gt;

&lt;p&gt;21 seconds querying the events table in our real life production database! Why
oh why is this happening?  A quick &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt; shows that Postgres is
doing sequential scan on &lt;code&gt;participant&lt;/code&gt; and &lt;code&gt;organizer&lt;/code&gt;.  Now, I am not a DBA so
I can&amp;rsquo;t fully explain why this is happening, but I do have some ideas about how
to avoid the scan.  Here is the fastest query I could make in SQL&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT COUNT(*) FROM (
    SELECT DISTINCT ON (
        e.start, e.end, e.title,
        )
        e.*,
        o.*
    FROM event e
        LEFT OUTER JOIN (
            SELECT * FROM participant
            WHERE
                participant.organization_id = 9776
                AND UPPER(participant.email::text) = UPPER(&#39;name@example.com&#39;)
        )
        p ON ( e.id = p.event_id )
        LEFT OUTER JOIN (
            SELECT * FROM organizer
            WHERE UPPER(organizer.email::text) = UPPER(&#39;name@example.com&#39;)
        ) o ON ( e.id = o.event_id )
    WHERE (
        e.organization_id =  9776
        AND e.start_at &amp;lt;= &#39;2016-12-02 00:00:00+00:00&#39;
        AND e.end_at &amp;gt;= &#39;2016-12-01 00:00:00+00:00&#39;
        AND (p.id IS NOT NULL OR o.id IS NOT NULL) -- User filter applied in subselect joins
    )
    ORDER BY
        e.start_at ASC,
        e.end_at ASC,
        e.title ASC
) sub;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This query is fast in production, but &amp;hellip; it can not be produced using the
Django ORM. Here, I explicitly made subqueries on indexed columns to speed it
up. In a future post, I promise to discuss how and when we use raw SQL so speed
up some of our requests. But, for the general CRUD API endpoint, I want to use
the ORM so that I can leverage the great filter framework provided by Django
Rest Framework. After a lot of tinkering, the best ORM compatible query I could
design is this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT COUNT(*) FROM (
    SELECT DISTINCT ON (
        e.start, e.end, e.title
        )
        e.*,
        o.*
    FROM event e
        LEFT OUTER JOIN participant p
            ON ( e.id = p.event_id )
        LEFT OUTER JOIN organizer o
            ON ( e.id = o.event_id )
    WHERE (
        e.organization_id =  9776
        AND e.start_at &amp;lt;= &#39;2016-12-02 00:00:00+00:00&#39;
        AND e.end_at &amp;gt;= &#39;2016-12-01 00:00:00+00:00&#39;
        AND (
            UPPER(p.email::text) = UPPER(&#39;name@example.com&#39;)
            OR UPPER(o.email::text) = UPPER(&#39;name@example.com&#39;)
        )
        AND (p.organization_id = 9776 OR p.organization_id IS NULL)
    )
    ORDER BY
        e.start_at ASC,
        e.end_at ASC,
        e.title ASC
) sub;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For specific API queries, we actually using a similar query in production. But,
I couldn&amp;rsquo;t find a good general solution until I realized that trying to do
everything at once might actually be too much to ask for, especially since the
API enforces relatively small pages. While reading through the documentation to
hunt down another bug, I &lt;a href=&#34;https://docs.djangoproject.com/en/1.10/ref/models/querysets/#prefetch-related&#34;&gt;re-read the docs&lt;/a&gt;
son &lt;code&gt;prefetch_related&lt;/code&gt; and it occurred to me that I could guarantee
exactly 4 fast queries to the db on every API call instead of one sporadically
slow query.  With the following small change to our viewset definition, our
slowest API call is an order of magnitude faster than the previous call with the
&lt;code&gt;select_related&lt;/code&gt; (although there is room for improvement)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/pUhp4eFa0T-hdtkHBUiowhLMhz9VTbWjt7L7iorDjvGpvybFl32Y-hK70ndpgmiCm33cHhsKqFSaj99IERwt28YHe-Ndb9jutVHWHCoVq0hjiCnws7HhgqGh5z1v40yZbihCgxDTf8Wf-dAXwyAYQ0RttclPPNIE4sLMUioLnkosHWYJ_if9VVjJ6xOPZACDGC70MijYqOG2TfYyKNBGmExl6mFf-F2v-vkNsXHFQzs9Wm12yM0TJ7Hrx7LOrHIOcVjb3OxBveoedc_qXoG89rTb3h9xvRRDigG0bEFcEYVRi3WjNsXt3gpuXb05tOepcgpLAHG8Nfpjx0cW0axwInwVPdrxLcfEbH6SnnnFNpTQQIX3UtEDV3z0AKvpFQwfvz8lfdc2Jr3FCXJqG0AtxXV1PwbWMZ4wudtcgLogUYkxXsfzTTRlDO5p8bPZZQSdfCDCrJdp_3lj1FUK7aNZsTVN-7-lVKdCQbYXEOit01zA_Jrv3fWM5znx1OPe_kMNWQqnpOk6uRT97zAi2Boopu4fnyoLn-wDfuiw10wpfaQEFIC910tSOeD1RBn9AF5lOlbop_vYrTU5Z5VBN3izI-ug8ucJKk6YgIb9bv2epzGTDUaehdIheMYEWtoAnmcSFE3XEFR--hy1m_w-1TZAIS4ex_A0O-cQ5DgaFzKTfg=w2286-h620-no&#34; alt=&#34;Performance with prefetch_related&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In fact, the careful observer will notice that the called components in this
trace are a bit different.  Well, the &lt;code&gt;prefetch_related&lt;/code&gt; was so successful,
that the same exact query no longer qualifies for being traced in New Relic and
the average dropped by half!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/IGNUFurt9JEPG5c_zHAO8RkML0joObxq66RPZ7ga3xrXYGpnKiNjUPMDAsGCGuEZ4nyMJz7crE5a5UuBQuMFSTl6biLTsahB6MPbbCLehVaBGhaJTQvrwvWao0049ksDScEb6l5KgqPr8kXZ75L1k3V1B2QGpzUTeV0jN3d2SWGtuHFrW6K2wNdnjGifnBP5bXcB_3MoAvj3ZAXmvmI08_o_n_UjSN0fSMAupq2tR013pB4HGYr1HXIN9-UZRc9oqjMqtu2rslGQi0FTxrOHY5xfn6lX-0Hzy8d0qKSkhrkW8GYkk0rZwRcoQonrivtCOMeXkFB2d5l45FZlW0oM2Yo0W9Zc_jFKeRnLSyX0cdbutBCoR1Q4KFxRKz0dFrPJFCvUA4gngJ_IYdkriL6uAIq1p3lHPze_1XI2reHp2qM689-ggmppmwrlyT6QVVMy5jA6xKG7hklVkmtgsm-aj8nw5tD3OkCbJLRlAJJabIxusEKHTTI5rDtXKaqkBAidWmAF1PMuEuj2wcNQvLCN93Y2Sy_zL-aY4JDpRFbmbYh2PfJarmHhibCUF3pWK79kI_uqLwmPb1a6g1UkuFQb1zA2FmXaoKD_T8wUBOUWfQ6NhKg6gCV_SYngrtMcvI3-nDmcvIALEn7xOaM32TGOAPx5igkG7QDkM2-dKHKjNA=w1260-h298-no&#34; alt=&#34;average reservations api call&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I would like to caution that I believe this works so well in this case because we
limit the API page size, so, the data and query sizes in the related queries are
relatively small per request. If you need to load a lot of data at once, I can
foresee this solution being much worse than &lt;code&gt;select_related&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;TL;DR: Monitor and analyze your production queries and &lt;code&gt;prefetch_related&lt;/code&gt; can
be a great solution if you can keep the number of queries and the page size
small.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>