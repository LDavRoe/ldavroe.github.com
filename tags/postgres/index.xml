<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>postgres on Lucas Roesler</title>
    <link>https://lucasroesler.com/tags/postgres/</link>
    <description>Recent content in postgres on Lucas Roesler</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Jan 2021 00:00:00 +0200</lastBuildDate><atom:link href="https://lucasroesler.com/tags/postgres/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Event driven functions powered by Postgres</title>
      <link>https://lucasroesler.com/posts/2021/event-driven-faasd-with-postgres/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0200</pubDate>
      
      <guid>https://lucasroesler.com/posts/2021/event-driven-faasd-with-postgres/</guid>
      <description>&lt;p&gt;An event-driven architecture can let you seamlessly extend your application or improve the scalability, if you can handle the eventual consistency. But your app may not be ready for this yet, or you don&amp;rsquo;t own the code in the app. A recently added a feature to &lt;code&gt;faasd&lt;/code&gt; got me thinking about event driven architecture powered by the Postgres WAL. Which means we can seamlessly extend your app without needing to change the app!&lt;/p&gt;
&lt;p&gt;This post will show you how to quickly deploy Postgresql along with an event listener and some custom functions. From there itâ€™s up to you what you build.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zero downtime deploys: A tale of Django migrations</title>
      <link>https://lucasroesler.com/posts/2017/automatic-migration-validation/</link>
      <pubDate>Mon, 20 Feb 2017 00:00:00 -0700</pubDate>
      
      <guid>https://lucasroesler.com/posts/2017/automatic-migration-validation/</guid>
      <description>&lt;p&gt;At Teem, we aim for zero down-time deploys; so, one of the most
important things we must validate is that things will not break mid-deploy!&lt;/p&gt;
&lt;p&gt;The most sensitive step of the deploy process is the changes to our database.
Prior to the automation I am about to describe, validation of the database
migrations required specialized knowledge about Postgres, the changes to the
application model, load on the database for that model, and a bit of general
experience. This obviously slows down reviews and subsequently deploys. Worse,
it was simply too easy to miss problem migrations when depending on only peer
reviews. To make our lives easier we created a series of validation checks to
ensure that each database migration will be backwards compatible.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Postgres Joins and Django Querysets</title>
      <link>https://lucasroesler.com/posts/2017/django-queryset-optimizing-joins/</link>
      <pubDate>Mon, 06 Feb 2017 20:00:00 +0000</pubDate>
      
      <guid>https://lucasroesler.com/posts/2017/django-queryset-optimizing-joins/</guid>
      <description>Dealing with inefficient joins in Django&amp;rsquo;s ORM</description>
    </item>
    
  </channel>
</rss>
